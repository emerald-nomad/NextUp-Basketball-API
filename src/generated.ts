/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "./context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  CourtType: "Indoor" | "Outdoor"
}

export interface NexusGenRootTypes {
  Address: { // root type
    city: string; // String!
    country: string; // String!
    state: string; // String!
    street: string; // String!
    streetNumber: string; // String!
    timeZone: string; // String!
    zipCode: string; // String!
  }
  Coords: { // root type
    latitude: number; // Float!
    longitude: number; // Float!
  }
  Court: { // root type
    address: NexusGenRootTypes['Address']; // Address!
    coords: NexusGenRootTypes['Coords']; // Coords!
    id: string; // String!
    name: string; // String!
    numberOfCourts: string; // String!
    phone: string; // String!
    type: NexusGenEnums['CourtType'][]; // [CourtType!]!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: Date;
  DateTime: DateTime;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CourtType: NexusGenEnums['CourtType'];
}

export interface NexusGenFieldTypes {
  Address: { // field return type
    city: string; // String!
    country: string; // String!
    formattedAddress: string; // String!
    state: string; // String!
    street: string; // String!
    streetNumber: string; // String!
    timeZone: string; // String!
    zipCode: string; // String!
  }
  Coords: { // field return type
    latitude: number; // Float!
    longitude: number; // Float!
  }
  Court: { // field return type
    address: NexusGenRootTypes['Address']; // Address!
    coords: NexusGenRootTypes['Coords']; // Coords!
    id: string; // String!
    name: string; // String!
    numberOfCourts: string; // String!
    phone: string; // String!
    type: NexusGenEnums['CourtType'][]; // [CourtType!]!
  }
  Query: { // field return type
    courts: NexusGenRootTypes['Court'][]; // [Court!]!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Address" | "Coords" | "Court" | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "CourtType";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}