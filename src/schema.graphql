### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Address {
  city: String!
  country: String!
  formattedAddress: String!
  state: String!
  street: String!
  streetNumber: String!
  timeZone: String!
  zipCode: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Coords {
  latitude: Float!
  longitude: Float!
}

"""Input type for logging in a user"""
input CoordsFilterInput {
  gte: Float!
  lte: Float!
}

type Court {
  address: Address!
  coords: Coords!
  id: String!
  name: String!
  numberOfCourts: String!
  phone: String!
  type: [CourtType!]!
}

"""Input type for logging in a user"""
input CourtsFilterInput {
  latitude: CoordsFilterInput!
  longitude: CoordsFilterInput!
}

"""Different types of available courts"""
enum CourtType {
  Indoor
  Outdoor
}

"""Required input for creating a session"""
input CreateSessionInput {
  courtId: ID!
  end: DateTime!
  start: DateTime!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Required input for to join/unjoin a session"""
input JoinUnjoinSessionInput {
  sessionId: ID!
}

"""Input for logging in a user"""
input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  createSession(input: CreateSessionInput!): Session!
  joinSession(input: JoinUnjoinSessionInput!): Session!

  """Login a user"""
  login(input: LoginInput!): AuthPayload!

  """Sign up new user"""
  signup(input: SignUpInput!): AuthPayload!
  unjoinSession(input: JoinUnjoinSessionInput!): Session!
  updateSession(input: UpdateSessionInput!): Session!
}

scalar Password

type Query {
  courts(where: CourtsFilterInput): [Court!]!
  sessions(where: SessionsFilterInput): [Session!]!
}

type Session {
  attending: [User!]!
  coords: Coords!
  court: Court!
  createdBy: User!
  date: String!
  end: DateTime!
  id: String!
  numberAttending: Int!
  start: DateTime!
  times: String!
  timeZone: String!
}

"""Input type for logging in a user"""
input SessionsFilterInput {
  latitude: CoordsFilterInput!
  longitude: CoordsFilterInput!
}

"""Input type for signing up a user"""
input SignUpInput {
  avatar: Upload
  confirmPassword: Password!
  fullName: String!
  password: Password!
  username: String!
}

"""Required input for updating a session"""
input UpdateSessionInput {
  end: DateTime
  sessionId: ID!
  start: DateTime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatarUrl: String
  fullName: String!
  id: String!
  username: String!
}
